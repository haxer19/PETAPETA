local TL = {}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local EnemyFolder = workspace:WaitForChild("Client"):WaitForChild("Enemy")

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local Humanoid = Character:WaitForChild("Humanoid")

local targetEnemy = nil
local isTrolling = false
local hoverHeight = 10 
local distanceFromEnemy = 40
local connection

local function findNearestEnemy()
    local closestEnemy = nil
    local shortestDistance = math.huge
    
    for _, part in pairs(EnemyFolder:GetChildren()) do
        if part:IsA("Part") and part.Size == Vector3.new(2, 2, 2) then
            local distance = (HumanoidRootPart.Position - part.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestEnemy = part
            end
        end
    end
    
    return closestEnemy
end

local function checkObstacle(startPos, targetPos)
    local rayOrigin = startPos
    local rayDirection = (targetPos - startPos)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    
    local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
    return raycastResult
end

local function getSafePosition(enemyPos, desiredPos)
    local direction = (desiredPos - enemyPos).Unit
    local checkPos = enemyPos + direction * distanceFromEnemy + Vector3.new(0, hoverHeight, 0)
    
    local obstacle = checkObstacle(HumanoidRootPart.Position, checkPos)
    
    if obstacle then
        for i = 1, 5 do
            local newHeight = hoverHeight + (i * 5)
            local testPos = enemyPos + direction * distanceFromEnemy + Vector3.new(0, newHeight, 0)
            if not checkObstacle(HumanoidRootPart.Position, testPos) then
                return testPos
            end
        end
        return enemyPos + direction * distanceFromEnemy + Vector3.new(0, hoverHeight + 20, 0)
    end
    
    return checkPos
end

local function updateTrollPosition()
    if targetEnemy and targetEnemy.Parent then
        local enemyPos = targetEnemy.Position
        local direction = (HumanoidRootPart.Position - enemyPos).Unit
        local idealPos = enemyPos + direction * distanceFromEnemy + Vector3.new(0, hoverHeight, 0)
        
        local safePos = getSafePosition(enemyPos, HumanoidRootPart.Position)
        HumanoidRootPart.CFrame = CFrame.new(HumanoidRootPart.Position:Lerp(safePos, 0.1))
        Humanoid.WalkSpeed = 0
        Humanoid.JumpPower = 0
    else
        targetEnemy = nil
        isTrolling = false
        Humanoid.WalkSpeed = 16
        Humanoid.JumpPower = 50
    end
end

function TL:StartTroll()
    if not connection then
        connection = RunService.Heartbeat:Connect(function()
            local newEnemy = findNearestEnemy()
            
            if newEnemy and not isTrolling then
                targetEnemy = newEnemy
                isTrolling = true
            elseif not newEnemy then
                targetEnemy = nil
                isTrolling = false
            end
            
            if isTrolling then
                updateTrollPosition()
            end
        end)
    end
end

function TL:StopTroll()
    if connection then
        connection:Disconnect()
        connection = nil
    end
    isTrolling = false
    targetEnemy = nil
    Humanoid.WalkSpeed = 16
    Humanoid.JumpPower = 50
end

LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    Character = newCharacter
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    Humanoid = Character:WaitForChild("Humanoid")
end)

return TL